
from random import randint, choice
import telebot
from telebot.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Message
)
import json

commands = '/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, ' \
           '/start_adventure - –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, ' \
           '/help - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, '\
           '/how_to_play - –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?, '\
            '/restart - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤'

BATTLE_SCORE = {}

bot = telebot.TeleBot(token=token)

WHEEL_FORTUNE = {
    1: '+ –∞—Ç–∞–∫–∞ –≥–æ–ª–æ–≤—ã',
    2: '+ –∞—Ç–∞–∫–∞ —Ç–µ–ª–∞',
    3: '+ –∞—Ç–∞–∫–∞ —Ä—É–∫/–Ω–æ–≥',
    4: '+ –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã',
    5: '+ –∑–∞—â–∏—Ç–∞ —Ç–µ–ª–∞',
    6: '+ –∑–∞—â–∏—Ç–∞ —Ä—É–∫/–Ω–æ–≥',
    7: '+ 1 –∑–¥–æ—Ä–æ–≤—å–µ',
    8: '+ 2 –∑–¥–æ—Ä–æ–≤—å–µ',
    9: '+ 3 –∑–¥–æ—Ä–æ–≤—å–µ',
    10: '- 1 –∑–¥–æ—Ä–æ–≤—å–µ',
    11: '- 2 –∑–¥–æ—Ä–æ–≤—å–µ',
    12: '- 3 –∑–¥–æ—Ä–æ–≤—å–µ',
    13: '*2 —É—Ä–æ–Ω',
    14: '–ü–æ–ª–Ω–æ–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ',
    15: '–°–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª–Ω–æ–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ',
    16: '–ü—É—Å—Ç–æ',
    17: '–ü—É—Å—Ç–æ',
    18: '–ü—É—Å—Ç–æ',
    19: '–ü—É—Å—Ç–æ',
    20: '–ü—É—Å—Ç–æ',
}

def keyboards():
    """ –∫–Ω–æ–ø–∫–∏ """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton('–ê—Ç–∞–∫–∞ –≥–æ–ª–æ–≤—ã', callback_data='head_attack'),
        InlineKeyboardButton('–ê—Ç–∞–∫–∞ —Ç–µ–ª–∞', callback_data='body_attack'),
        InlineKeyboardButton('–ê—Ç–∞–∫–∞ —Ä—É–∫/–Ω–æ–≥', callback_data='hands_legs_attack'),
    )
    keyboard.add(
        InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã', callback_data='head_defense'),
        InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ —Ç–µ–ª–∞', callback_data='body_defense'),
        InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ —Ä—É–∫/–Ω–æ–≥', callback_data='hands_legs_defense'),
    )
    keyboard.add(InlineKeyboardButton('–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data='Wheel_fortune')),
    keyboard.add(InlineKeyboardButton('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', callback_data='Enemy_actions')),

    keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
    return keyboard

def keyboards_scissors():
    """ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üóø", callback_data='stone'),
        InlineKeyboardButton("‚úÇ", callback_data='scissors'),
        InlineKeyboardButton("üìÑ", callback_data='paper'),
    )
    keyboard.add(InlineKeyboardButton('—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', callback_data='enemy_rock_paper_scissors'))
    keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
    return keyboard
@bot.message_handler(commands=['start'])
def start(message):
    """ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ """
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–∫–≤–µ—Å—Ç. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –≤–≤–µ–¥–∏ {"/help"}')
    print(message.chat.username)


@bot.message_handler(commands=['restart'])
def restart(message):

    global BATTLE_SCORE
    user = message.chat.username
    BATTLE_SCORE[user] = {
        'health': 10,
        'attack_power': 1,
        'block_to': None,
        'attack_to': None
    }
    BATTLE_SCORE['AL'] = {
        'health': 10,
        'attack_power': 1,
        'block_to': None,
        'attack_to': None
    }
    with open("battle_score.json", "w") as f:
        json.dump(BATTLE_SCORE, fp=f)
    bot.send_message(message.chat.id, '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')

@bot.message_handler(commands=['help'])
def help_me(message):
    bot.send_message(message.chat.id, '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
    '/help - –£–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n'
    '/start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n'
    '/how_to_play - –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n'
    '/restart - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'
                     )

@bot.message_handler(commands=['how_to_play'])
def how(message):
    bot.send_message(message.chat.id, "–í –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫, –∏–º–µ—é—â–∏–π —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
                                      "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–±–µ–¥–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∞—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞."
                                      "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ç–æ –æ–¥–Ω—É —á–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –∏ –æ–¥–Ω—É –¥–ª—è –∞—Ç–∞–∫–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–∏–º–∞–π –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–µ–ª–∞–µ—Ç —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ —Ç—ã (–∑–∞—â–∏—Ç–∏—Ç –∏ —É–¥–∞—Ä–∏—Ç –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞)"
                                      "–î–∞–ª–µ–µ –µ—Å–ª–∏ —Ç—ã —É–¥–∞—Ä–∏—à—å –ø–æ —Ç–æ—á–∫–µ, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞—â–∏—Ç–∏–ª, –æ–Ω –Ω–µ –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–Ω–∞. –ù–æ –µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –±–ª–æ–∫ —Å–æ–≤—Å–µ–º –Ω–µ –≤ —Ç—É —á–∞—Ç—å —Ç–µ–ª–∞, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–¥–∞—Ä–∏–ª –µ–º—É —Å–Ω–º–µ—Ç—Å—è 1 –µ–¥–∏–Ω–∏—Ü–∞ –∑–¥–æ—Ä–æ–≤—å—è"
                                      "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –º–µ—Ö–∞–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º. "
                                      "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã —É–º—Ä–µ—à—å, —Ç–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è - –∏–≥—Ä–∞—Ç—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å (–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–æ—è –≤–≤–µ—Å—Ç–∏ /restart. –¢–∞–∫ —Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—à—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –Ω–æ—Ä–º—É, –∞ —Ç–æ –∏–Ω–∞—á–µ —Ç—ã –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å —Å —Ç–µ–º —É—Ä–æ–≤–Ω–µ–º –∑–¥–æ—Ä–æ–≤—å—è, —Å –∫–∞–∫–∏–º –±—ã–ª –≤ –∫–æ–Ω—Ü–µ –±–æ—è)"
                                      "–¢–∞–∫–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —Å—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π —Å–≤–æ–∏ —Å–∏–ª—ã –≤ –Ω–∞—à–µ–π –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ –∏–ª–∏ –∂–µ –ø–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É —Å—ã–≥—Ä–∞–≤ –≤–æ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–≥—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π"

                     )

@bot.message_handler(commands=['start_game'])
def first_location(message):
    """–ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è"""
    global BATTLE_SCORE

    with open('media/location1.jpg', 'rb') as f:
        bot.send_photo(message.chat.id, f)
    user = message.chat.username
    bot.send_message(message.chat.id, '–î–∂—É–Ω–≥–ª–∏ - —ç—Ç–æ –æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–±–∏—Ç–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è.'
                                     '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –æ–±–µ–∑—å—è–Ω, —Ç–∏–≥—Ä–æ–≤, —è–≥—É–∞—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.'
                                     '–ù–æ —Å–∞–º—ã–º –≥—Ä–æ–∑–Ω—ã–º –≤ —ç—Ç–æ–π —Å—Ä–µ–¥–µ –±—É–¥–µ—Ç –¥—Ä–∞–∫–æ–Ω –¥–∂—É–Ω–≥–ª–µ–π. –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—á–Ω–∞—è –±—Ä–æ–Ω—è –∑–∞—â–∏—â–∞–µ—Ç –µ–≥–æ'
                                      '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –∞ –æ–≥—Ä–æ–º–Ω–∞—è –ø–∞—Å—Ç—å —Å —Ä—è–¥–∞–º–∏ –æ—Å—Ç—Ä—ã—Ö, –∫–∞–∫ –±—Ä–∏—Ç–≤–∞ –∑—É–±–æ–≤ –º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç—å –≤–∞—Å')
    try:
        with open('battle_score.json') as f:
            BATTLE_SCORE = json.load(f)
    except FileNotFoundError:  # –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞—Ç–ª–µ
        BATTLE_SCORE[user] = {
            'health': 10,
            'attack_power': 1,
            'block_to': None,
            'attack_to': None
        }
        with open("battle_score.json", "w") as f:
            json.dump(BATTLE_SCORE, fp=f)
    if BATTLE_SCORE[user]['health'] <= 0:
        BATTLE_SCORE[user]['health'] = 10
    BATTLE_SCORE[user]['location'] = 1
    print(BATTLE_SCORE)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton('–ü–æ–±–µ–¥–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞', callback_data='location_1_monster'),
        InlineKeyboardButton('–û—Ä–ª–µ–Ω–∫–∞', callback_data='location_1_choice_2'),
        InlineKeyboardButton("'üóø', '‚úÇ', 'üìÑ'", callback_data='location_1_choice_3')
    )
    bot.send_message(
            message.chat.id,
            f"{user}, –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è. "
            f"–¢–≤–æ–∏ —Å–∏–ª—ã: \n health: {BATTLE_SCORE[user]['health']} & attack_power: {BATTLE_SCORE[user]['attack_power']}",
            reply_markup=keyboard
    )

@bot.message_handler(commands=['location_2'])
def second_location(message):
    """–í—Ç–æ—Ä–∞—è –ª–æ–∫–∞—Ü–∏—è"""
    global BATTLE_SCORE
    user = message.chat.username
    # –ù–£–ñ–ù–û –§–û–¢–û –ù–ï–ô–†–û–°–ï–¢–ò –∏ –û–ü–ò–°–ê–ù–ò–ï
    with open('media/location2.jpg', 'rb') as f:
        bot.send_photo(message.chat.id, f)
        bot.send_message(message.chat.id,'–ü–æ–¥–∑–µ–º–µ–ª—å—è –≤ –∏–≥—Ä–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å–µ—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã—Ö —Ç—É–Ω–Ω–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç,'
                                         '–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Å—Å–∞ - '
                                         '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—è —Ç–µ–Ω–µ–π')

        BATTLE_SCORE[user]['location'] = 2
        print(BATTLE_SCORE)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton('–ü–æ–±–µ–¥–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞', callback_data='location_2_monster'),
        InlineKeyboardButton('–ò–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏', callback_data='location_2_choice_2'),
        InlineKeyboardButton("'üóø', '‚úÇ', 'üìÑ'", callback_data='location_2_choice_3'),
    )
    bot.send_message(
            message.chat.id,
            f"{user}, –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤—Ç–æ—Ä–∞—è –ª–æ–∫–∞—Ü–∏—è. "
            f"–¢–≤–æ–∏ —Å–∏–ª—ã: \n health: {BATTLE_SCORE[user]['health']} & attack_power: {BATTLE_SCORE[user]['attack_power']}",
            reply_markup=keyboard
    )


@bot.message_handler(commands=['location_3'])
def third_location(message):
    """–¢—Ä–µ—Ç—å—è –ª–æ–∫–∞—Ü–∏—è"""
    global BATTLE_SCORE
    user = message.chat.username
    with open('media/location3.jpg', 'rb') as f:
        bot.send_photo(message.chat.id, f)
        bot.send_message(message.chat.id,'–ê—Ä–∫–∏—Ç–µ—á–µ—Å–∫–∞—è –ø—É—Å—Ç—ã–Ω—è - —Å–∞–º–æ–µ —Ö–æ–ª–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∫–æ–≥–¥–∞ –ª–∏–±–æ –±—ã–≤–∞–ª–∏.'
                                         '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–µ –¥–∞—é—Ç –≤—ã–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–º—É –∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –º–µ—Ä–∑–ª–æ—Å—Ç–æ–π–∫–∏–µ'
                                         '–º–æ–≥—É—Ç –≤—ã–∂–∏—Ç—å —Ç—É—Ç')
        BATTLE_SCORE[user]['location'] = 3
        print(BATTLE_SCORE)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton('–ü–æ–±–µ–¥–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞', callback_data='location_3_monster'),
        InlineKeyboardButton('–®–∞–Ω—Å 1 –∫ 100', callback_data='location_3_choice_2'), #–û–±–º–∞–Ω–∫–∞ (–®–∞–Ω—Å –≤—ã–∂–∏—Ç—å 100%)
        InlineKeyboardButton("'üóø', '‚úÇ','üìÑ'", callback_data='location_3_choice_3'),
    )
    bot.send_message(
            message.chat.id,
            f"{user}, –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç—Ä–µ—Ç—å—è –ª–æ–∫–∞—Ü–∏—è. "
            f"–¢–≤–æ–∏ —Å–∏–ª—ã: \n health: {BATTLE_SCORE[user]['health']} & attack_power: {BATTLE_SCORE[user]['attack_power']}",
            reply_markup=keyboard
    )
@bot.message_handler(commands=['location_4'])
def final_location(message):
    """–§–∏–Ω–∞–ª –∏–≥—Ä—ã"""
    global BATTLE_SCORE
    # –ù–£–ñ–ù–û –§–û–¢–û –ù–ï–ô–†–û–°–ï–¢–ò –∏ –û–ü–ò–°–ê–ù–ò–ï
    with open('media/kybok.jpg', 'rb') as f:
        bot.send_photo(message.chat.id, f)
    user = message.chat.username
    with open('battle_score.json') as f:
        BATTLE_SCORE = json.load(f)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='Quite the game'))
    bot.send_message(
        message.chat.id,
        f"{user}, —Ç—ã –ø–æ–±–µ–¥–∏–ª! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º. "
        f"–¢–≤–æ–∏ —Å–∏–ª—ã: \n health: {BATTLE_SCORE[user]['health']} & attack_power: {BATTLE_SCORE[user]['attack_power']}",
        reply_markup=keyboard)


gi




# @bot.message_handgler(commands=['options'])
# def options(message):
#     """ –í—ã–∑–æ–≤ –∫–Ω–æ–ø–æ–∫ """
#     global BATTLE_SCORE
#     user = message.chat.username
#
#     try:
#         with open('battle_score.json') as f:
#             BATTLE_SCORE = json.load(f)
#     except FileNotFoundError:  # –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞—Ç–ª–µ
#         BATTLE_SCORE[user] = {
#             'health': 10,
#             'attack_power': 1,
#             'block_to': None,
#             'attack_to': None
#         }
#         BATTLE_SCORE['AL'] = {
#             'health': 10,
#             'attack_power': 1,
#             'block_to': None,
#             'attack_to': None
#         }


    print(str(BATTLE_SCORE))
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards())
    bot.send_message(message.chat.id, str(BATTLE_SCORE))




@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ """
    global WHEEL_FORTUNE
    user = call.message.chat.username
    #user = message.chat.username
    if call.data == 'head_attack':
        BATTLE_SCORE[user]['attack_to'] = 'head'
        bot.answer_callback_query(call.id, text='selected head_attack')
        print(BATTLE_SCORE)
        print('head_attack')
    elif call.data == 'quit_the_game':
        bot.answer_callback_query(call.id, text='selected quit_the_game')
        bot.send_message(
            call.from_user.id,
            '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
            '/help - –£–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n'
            '/start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n'
            '/how_to_play - –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n'
            '/restart - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'
        )
        print('quit_the_game')
        print(BATTLE_SCORE)
    elif call.data == 'body_attack':
        BATTLE_SCORE[user]['attack_to'] = 'body'
        bot.answer_callback_query(call.id, text='selected body_attack')
        print('body_attack')
        print(BATTLE_SCORE)
    elif call.data == 'hands_legs_attack':
        BATTLE_SCORE[user]['attack_to'] = 'hands_legs'
        bot.answer_callback_query(call.id, text='selected hands_legs_attack')
        print('hands_legs_attack')
        print(BATTLE_SCORE)
    elif call.data == 'head_defense':
        BATTLE_SCORE[user]['block_to'] = 'head'
        bot.answer_callback_query(call.id, text='selected head_defense')
        print('head_defense')
        print(BATTLE_SCORE)
    elif call.data == 'body_defense':
        BATTLE_SCORE[user]['block_to'] = 'body'
        bot.answer_callback_query(call.id, text='selected body_defense')
        print('body_defense')
        print(BATTLE_SCORE)
    elif call.data == 'hands_legs_defense':
        BATTLE_SCORE[user]['block_to'] = 'hands_legs'
        bot.answer_callback_query(call.id, text='selected hands_legs_defense')
        print('hands_legs_defense')
        print(BATTLE_SCORE)
    elif call.data == "location_1_monster":
        bot.answer_callback_query(call.id, text="selected location_1_monster")
        print("location_1_monster")
        BATTLE_SCORE['AL'] = {
            'health': 3,
            'attack_power': 1,
            'block_to': None,
            'attack_to': None
        }
        print(f'battle_score: {BATTLE_SCORE}')
        with open('media/monster1.jpg', 'rb') as f:
            bot.send_photo(call.from_user.id, f)

        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards())
        bot.send_message(call.from_user.id, str(BATTLE_SCORE))
    elif call.data == 'location_1_choice_2':
        bot.answer_callback_query(call.id, text='selected location_1_choice_2')
        random_choice = choice(['won', 'died'])
        print(f'{user} –≤—ã–±—Ä–∞–ª –û—Ä–ª—è–Ω–∫—É –∏ {random_choice}')
        bot.send_message(call.from_user.id, f'{user} –≤—ã–±—Ä–∞–ª –û—Ä–ª—è–Ω–∫—É –∏ {random_choice}')
        if random_choice == 'won':
            with open('media/hero_win.jpg', 'rb') as f:
                bot.send_photo(call.from_user.id, f)
            bot.send_message(call.from_user.id, f"{user} –ü–û–ë–ï–î–ò–õ!!!")
            BATTLE_SCORE[user]['location'] += 1
            bot.send_message(call.from_user.id, f"/location_{BATTLE_SCORE[user]['location']}")
        else:
            with open('media/hero_died.jpg', 'rb') as f:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                bot.send_photo(call.from_user.id, f)
                bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)
    elif call.data == 'location_1_choice_3':
        bot.answer_callback_query(call.id, text='selected location_1_choice_3')
        print('location_1_choice_3')
        BATTLE_SCORE['AL'] = {
            'health': 4,
            'attack_power': 1,
            'block_to': None,
            'attack_to': None
        }
        BATTLE_SCORE[user]['rock_paper_scissors'] = "stone" # —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards_scissors())

    elif call.data == 'location_2_monster':
        bot.answer_callback_query(call.id, text="selected location_2_monster")
        print("location_2_monster")

        BATTLE_SCORE['AL'] = {
            'health': 3,
            'attack_power': 2,
            'block_to': None,
            'attack_to': None
        }
        print(f'battle_score: {BATTLE_SCORE}')
        with open('media/monster2.jpg', 'rb') as f:
            bot.send_photo(call.from_user.id, f)
        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards())
        bot.send_message(call.from_user.id, str(BATTLE_SCORE))
    elif call.data == 'location_2_choice_2':
        bot.answer_callback_query(call.id, text='selected location_2_choice_2')
        user_died_dice = randint(1, 6)
        al_died_dice = randint(1, 6)
        print(f'{user} –†–µ—à–∏–ª —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ç–∏–≤–∏–∫–æ–º. –£ {user} –≤—ã–ø–∞–ª–∞ {user_died_dice}, –∞ —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ {al_died_dice}')
        bot.send_message(call.from_user.id, f'{user} –†–µ—à–∏–ª —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ç–∏–≤–∏–∫–æ–º. –£ {user} –≤—ã–ø–∞–ª–∞ {user_died_dice}, –∞ —É AL {al_died_dice}')
        if user_died_dice >= al_died_dice:
            with open('media/hero_win.jpg', 'rb') as f:
                bot.send_photo(call.from_user.id, f)
            bot.send_message(call.from_user.id, f'{user} –ü–û–ë–ï–î–ò–õ!!!')
            BATTLE_SCORE[user]['location'] += 1
            bot.send_message(call.from_user.id, f"/location_{BATTLE_SCORE[user]['location']}")
        else:
            with open('media/hero_died.jpg', 'rb') as f:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                bot.send_photo(call.from_user.id, f)
                bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)
        #
    elif call.data == 'location_2_choice_3':
        bot.answer_callback_query(call.id, text='selected location_2_choice_3')
        print('location_2_choice_3')
        BATTLE_SCORE['AL'] = {
            'health': 3,
            'attack_power': 2,
            'block_to': None,
            'attack_to': None
        }
        BATTLE_SCORE[user]['rock_paper_scissors'] = "stone" # —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards_scissors())
    elif call.data == 'location_3_monster':
        bot.answer_callback_query(call.id, text="selected location_3_monster")
        print("location_3_monster")
        BATTLE_SCORE['AL'] = {
            'health': 1,
            'attack_power': 2,
            'block_to': None,
            'attack_to': None
        }
        BATTLE_SCORE[user]['health'] += 5
        print(f'battle_score: {BATTLE_SCORE}')
        with open('media/monster3.jpg', 'rb') as f:
            bot.send_photo(call.from_user.id, f)
        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards())
        bot.send_message(call.from_user.id, str(BATTLE_SCORE))
    elif call.data == 'location_3_choice_2':
        bot.answer_callback_query(call.id, text='selected location_3_choice_2')
        one_procent_chans = randint(1,100)
        if one_procent_chans >= 0:
            with open('media/hero_win.jpg', 'rb') as f:
                bot.send_photo(call.from_user.id, f)
            print(f'{user} —Ä–µ—à–∏–ª –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏... –ï–ú–£ –ü–û–í–ï–ó–õ–û!!!')
            bot.send_message(call.from_user.id, f'{user} —Ä–µ—à–∏–ª –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏... –ï–ú–£ –ü–û–í–ï–ó–õ–û!!!')
            BATTLE_SCORE[user]['location'] += 1
            bot.send_message(call.from_user.id, f"/location_{BATTLE_SCORE[user]['location']}")
    elif call.data == 'location_3_choice_3':
        bot.answer_callback_query(call.id, text='selected location_3_choice_3')
        print('location_3_choice_3')
        BATTLE_SCORE[user]['health'] += 5
        BATTLE_SCORE['AL'] = {
            'health': 10,
            'attack_power': 1,
            'block_to': None,
            'attack_to': None
        }
        BATTLE_SCORE[user]['rock_paper_scissors'] = "stone" # —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        bot.send_message(call.from_user.id, f'–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:', reply_markup=keyboards_scissors())
    elif call.data == 'Wheel_fortune':
        random_number = randint(1, len(WHEEL_FORTUNE))
        bot.answer_callback_query(call.id, text=f'selected Wheel_fortune {WHEEL_FORTUNE.get(random_number)}')
        bot.send_message(
            call.from_user.id,
            f"{user} selected Wheel_fortune {WHEEL_FORTUNE.get(random_number)} \n"
            f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è!!!!")
        print(f"Wheel_fortune {WHEEL_FORTUNE.get(random_number)}")
    elif call.data == 'Enemy_actions':
        if BATTLE_SCORE[user]['health'] > 0:
            bot.answer_callback_query(call.id, text='selected Enemy_actions')
            BATTLE_SCORE['AL']['attack_to'] = choice(['body', 'head', 'hands_legs'])
            BATTLE_SCORE['AL']['block_to'] = choice(['body', 'head', 'hands_legs'])
            print('Enemy_actions')
            bot.send_message(call.from_user.id, f"{user} selected Enemy_actions: {BATTLE_SCORE}")
            fight = fighting(user, BATTLE_SCORE)  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è
            bot.send_message(call.from_user.id, fight)
            bot.send_message(
                call.from_user.id,
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π:"
                f" \n {user}: {BATTLE_SCORE[user]['health']}, \n {'AL'}: {BATTLE_SCORE['AL']['health']}"
            )
            if BATTLE_SCORE[user]['health'] > 0 and BATTLE_SCORE['AL']['health'] > 0:
                bot.send_message(call.from_user.id, f"–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:", reply_markup=keyboards())
            elif BATTLE_SCORE[user]['health'] > 0 and BATTLE_SCORE['AL']['health'] <= 0:
                with open('media/hero_win.jpg', 'rb') as f:
                    bot.send_photo(call.from_user.id, f)
                    bot.send_message(call.from_user.id, f"{user} –ü–û–ë–ï–î–ò–õ!!!")
                BATTLE_SCORE[user]['location'] += 1
                bot.send_message(call.from_user.id, f"/location_{BATTLE_SCORE[user]['location']}")
            else:
                with open('media/hero_died.jpg', 'rb') as f:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                    bot.send_photo(call.from_user.id, f)
                    bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)
        else:
            with open('media/hero_died.jpg', 'rb') as f:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                bot.send_photo(call.from_user.id, f)
                bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)
    elif call.data == 'enemy_rock_paper_scissors':
        if BATTLE_SCORE[user]['health'] > 0:
            bot.answer_callback_query(call.id, text='selected enemy_rock_paper_scissors')
            BATTLE_SCORE['AL']['rock_paper_scissors'] = choice(['stone', 'paper', 'scissors'])
            bot.send_message(call.from_user.id, f"{user} selected enemy_rock_paper_scissors: {BATTLE_SCORE}")
            print(f'{user} selected enemy_rock_paper_scissors: {BATTLE_SCORE}')
            fight = rock_paper_scissors(user, BATTLE_SCORE)  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è
            bot.send_message(call.from_user.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞: \n {fight}")
            if BATTLE_SCORE[user]['health'] > 0 and BATTLE_SCORE['AL']['health'] > 0:
                bot.send_message(call.from_user.id, f"–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—É–Ω–¥–µ:", reply_markup=keyboards_scissors())
            elif BATTLE_SCORE[user]['health'] > 0 and BATTLE_SCORE['AL']['health'] <= 0:
                with open('media/hero_win.jpg', 'rb') as f:
                    bot.send_photo(call.from_user.id, f)
                    bot.send_message(call.from_user.id, f"{user} –ü–û–ë–ï–î–ò–õ!!!")
                BATTLE_SCORE[user]['location'] += 1
                bot.send_message(call.from_user.id, f"/location_{BATTLE_SCORE[user]['location']}")
            else:
                with open('media/hero_died.jpg', 'rb') as f:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                    bot.send_photo(call.from_user.id, f)
                    bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)
        else:
            with open('media/hero_died.jpg', 'rb') as f:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='quit_the_game'))
                bot.send_photo(call.from_user.id, f)
                bot.send_message(call.from_user.id, f"{user} –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é –ø–æ–≥–∏–±:/", reply_markup=keyboard)

    elif call.data == 'stone':
        bot.answer_callback_query(call.id, text='selected stone')
        print('selected_stone')
        BATTLE_SCORE[user]['rock_paper_scissors'] = "stone"
        print(BATTLE_SCORE)
    elif call.data == 'paper':
        bot.answer_callback_query(call.id, text='selected paper')
        print('selected_paper')
        BATTLE_SCORE[user]['rock_paper_scissors'] = "paper"
        print(BATTLE_SCORE)
    elif call.data == 'scissors':
        bot.answer_callback_query(call.id, text='selected scissors')
        print('selected_scissors')
        BATTLE_SCORE[user]['rock_paper_scissors'] = "scissors"
        print(BATTLE_SCORE)



    elif call.data == 'quit_the_game':
        bot.answer_callback_query(call.id, text='selected quit_the_game')
        bot.send_message(
            call.from_user.id,
            '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
            '/help - –£–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n'
            '/start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n'
            '/how_to_play - –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n'
            '/restart - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'
        )
        print('quit_the_game')
        print(BATTLE_SCORE)



def fighting(user, BATTLE_SCORE):

    """ –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è """
    print(f"before_fighting: {BATTLE_SCORE}")
    user_attack = BATTLE_SCORE[user]['attack_to']
    user_block = BATTLE_SCORE[user]['block_to']
    user_attack_power = BATTLE_SCORE[user]['attack_power']
    al_attack = BATTLE_SCORE['AL']['attack_to']
    al_block = BATTLE_SCORE['AL']['block_to']
    al_attack_power = BATTLE_SCORE['AL']['attack_power']
    fighting_results = ""


    if user_attack != al_block:  # AL –Ω–µ —Å–º–æ–≥ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è
        BATTLE_SCORE['AL']['health'] -= user_attack_power
        user_attack_results = (
            f"{user} –∞—Ç–∞–∫–æ–≤–∞–ª {user_attack}, –Ω–æ {'AL'} –∑–∞—â–∏—â–∞–ª {al_block} \n"
            f"{'AL'} –ø–æ—Ç–µ—Ä—è–ª {user_attack_power}, –∏—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {'AL'}: {BATTLE_SCORE['AL']['health']}"
        )
        print(user_attack_results)
        fighting_results += user_attack_results

    if al_attack != user_block:  # user –Ω–µ —Å–º–æ–≥ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è
        BATTLE_SCORE[user]['health'] -= al_attack_power
        al_attack_results = (
            f"\n{'AL'} –∞—Ç–∞–∫–æ–≤–∞–ª {al_attack}, –Ω–æ {user} –∑–∞—â–∏—â–∞–ª {user_block} \n"
            f"{user} –ø–æ—Ç–µ—Ä—è–ª {al_attack_power}, –∏—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {user}: {BATTLE_SCORE[user]['health']}"
        )
        print(al_attack_results)
        fighting_results += al_attack_results

    if al_attack == user_block and user_attack == al_block:  # –Ω–∏—á—å—è
        draw = (
            f"{user} –∞—Ç–∞–∫–æ–≤–∞–ª {user_attack}, –Ω–æ {'AL'} –∑–∞—â–∏—â–∞–ª {al_block} \n"
            f"{'AL'} –∞—Ç–∞–∫–æ–≤–∞–ª {al_attack}, –Ω–æ {user} –∑–∞—â–∏—â–∞–ª {user_block} \n"
            f"–ù–ò–ß–¨–Ø. –ò—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {user}: {BATTLE_SCORE[user]['health']}, {'AL'}: {BATTLE_SCORE['AL']['health']}"
        )
        print(draw)
        fighting_results += draw
    print(f"after_fighting: {BATTLE_SCORE}")
    with open("BATTLE_SCORE.json", "w") as f:
        json.dump(BATTLE_SCORE, fp=f)
    return fighting_results
def rock_paper_scissors(user, BATTLE_SCORE):
    """–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –∫–∞–º–Ω–∏, –Ω–æ–∂–Ω–∏—Ü–∞, –±—É–º–∞–≥–∞."""
    variants = {'stone': "üóø", 'scissors': "‚úÇÔ∏è", 'paper': "üìÑ"}
    user_choice = BATTLE_SCORE[user]['rock_paper_scissors']
    al_choice = BATTLE_SCORE['AL']['rock_paper_scissors']
    user_attack_power = BATTLE_SCORE[user]['attack_power']
    al_attack_power = BATTLE_SCORE['AL']['attack_power']
    print(f"user_choice: {variants[user_choice]} al_choice: {variants[al_choice]}")
    game_results = ""
    if user_choice == al_choice:
        draw = (
            f"{user} - {variants[user_choice]}, –∏ {'AL'} - {variants[al_choice]} \n"
            f"–ù–ò–ß–¨–Ø. –ò—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {user}: {BATTLE_SCORE[user]['health']}, {'AL'}: {BATTLE_SCORE['AL']['health']}"
        )
        print(draw)
        game_results += draw
    # –Ω–∞–±–æ—Ä —É—Å–ª–æ–≤–∏–π, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    elif (
            (user_choice == 'stone' and al_choice == 'scissors')
            or (user_choice == 'scissors' and al_choice == 'paper')
            or (user_choice == 'paper' and al_choice == 'stone')
    ):
        BATTLE_SCORE['AL']['health'] -= user_attack_power
        user_attack_results = (
            f"{user} - {variants[user_choice]}, –Ω–æ {'AL'} - {variants[al_choice]} –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª \n"
            f"{'AL'} –ø–æ—Ç–µ—Ä—è–ª {user_attack_power}, –∏—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {'AL'}: {BATTLE_SCORE['AL']['health']}"
        )
        print(user_attack_results)
        game_results += user_attack_results
    # –ª—é–±–∞—è –¥—Ä—É–≥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –ø–æ–±–µ–¥–∞ –∫–æ–º–ø–∞
    else:
        BATTLE_SCORE[user]['health'] -= al_attack_power
        al_attack_results = (
            f"\n{'AL'} - {variants[al_choice]}, –Ω–æ {user} - {variants[user_choice]} –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª \n"
            f"{user} –ø–æ—Ç–µ—Ä—è–ª {al_attack_power}, –∏—Ç–æ–≥–æ –∂–∏–∑–Ω–∏ {user}: {BATTLE_SCORE[user]['health']}"
        )
        print(al_attack_results)
        game_results += al_attack_results
    print(f"after_game: {BATTLE_SCORE}")
    with open("battle_score.json", "w") as f:
        json.dump(BATTLE_SCORE, fp=f)
    return game_results

bot.polling()



